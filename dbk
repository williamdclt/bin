#!/usr/bin/env bash

set -euo pipefail

. ~/bin/colors

dbcpid=
localport=5987
dbc_is_running() {
    kill -0 "$dbcpid" 2> /dev/null
}

# if anything fails, stop dbc on exit if it's running
dbc_cleanup() {
  if [ -n "$dbcpid" ] && dbc_is_running; then
    echo "${YELLOW}üî™ Kill dbc${NC}"
    kill "$dbcpid" || true
    dbcpid=
  fi
}
trap dbc_cleanup EXIT INT ABRT KILL TERM HUP

# pick a pod, print the env variables
envvars=$(k shell env)
# keep only the env vars (line contains "=") and pick one, prefilled "DBURL"
dburl=$(echo "$envvars" | grep "=" | fzf --no-preview --query DBURL)
# Remove non-printable character, as we're getting some weirdness
dburl=$(echo "$dburl" | sed 's/[^[:print:]]//g')
# Some other cleanup
dburl=$(echo "$dburl" | sed 's/[^=]*=//' | sed 's/\s*$//')
hostname=$(node -e "console.log(new URL('$dburl').hostname)")
username=$(node -e "console.log(new URL('$dburl').username)")
password=$(node -e "console.log(new URL('$dburl').password)")
dbpath=$(node -e "console.log(new URL('$dburl').pathname)")
dburl="postgresql://$username:$password@localhost:$localport$dbpath"

if lsof -iTCP -P -sTCP:LISTEN | grep "$localport"; then
    existingTunnelPid=$(lsof -iTCP -P -sTCP:LISTEN | grep "$localport" | ~/bin/col 2)
    echo "${YELLOW}üî™ Killing existing tunnel${NC}"
    kill -9 "$existingTunnelPid"
fi

echo "${YELLOW}üîó Start dbc for "$hostname"${NC}"
dbc connect -H "$hostname" -l "$localport" &
dbcpid=$!

# Wait for dbc to start
while ! psql "$dburl" -c "SELECT 1" > /dev/null 2>&1 ; do
    echo -n '.'
    sleep 1
done
echo

# Check that dbc is running
if ! dbc_is_running; then
  echo "${RED}‚ùå dbc has exited unexpectedly${NC}"
  exit 1
fi

psql "$dburl"

dbc_cleanup
wait # wait for dbc to terminate

